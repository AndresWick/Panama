CREATE OR REPLACE FUNCTION FU_CALCULAR_PERIODO(
    lf_fecha_reserva DATE
) 
RETURN VARCHAR2 AS 
    lq_dias_min     periodo.q_dias_min%TYPE;
    lq_dias_max     periodo.q_dias_max%TYPE;
    
    CURSOR c_periodos IS 
        SELECT K_ID ,Q_DIAS_MIN ,Q_DIAS_MAX ,N_PERIODO  
        FROM periodo;
        
    l_periodo periodo%ROWTYPE;
    lq_dias_restantes NUMBER(6,0);
    ln_return_periodo periodo.k_id%TYPE;
    
BEGIN
    lq_dias_restantes := lf_fecha_reserva-SYSDATE;
    ln_return_periodo := 0;
    dbms_output.put_line(lq_dias_restantes); 
    
    OPEN c_periodos;
    LOOP
        FETCH c_periodos INTO l_periodo;
        EXIT WHEN c_periodos%NOTFOUND;
        
        IF lq_dias_restantes >= l_periodo.Q_DIAS_MIN AND lq_dias_restantes <= l_periodo.Q_DIAS_MAX THEN
          ln_return_periodo := l_periodo.k_id;
        END IF;
        
    END LOOP;
    CLOSE c_periodos;
    dbms_output.put_line(ln_return_periodo); 
    RETURN ln_return_periodo;
END FU_CALCULAR_PERIODO;
/



CREATE OR REPLACE FUNCTION FU_CUPOS_DISPONIBLES(
    lf_fecha        DATE,
    ln_sentido      cronograma.n_sentido%type,
    lk_periodo      periodo.k_id%type,
    lk_tipo_buque   cronograma.k_tipobuque%type
) RETURN NUMBER AS 
    lq_numero_cupos_disponibles   NUMBER;
    ln_periodo                    periodo.n_periodo%type;
BEGIN
    SELECT Q_CUPOS_DISP 
      INTO lq_numero_cupos_disponibles 
    FROM CRONOGRAMA C 
    WHERE C.F_FECHA = lf_fecha 
      AND C.N_SENTIDO = ln_sentido 
      AND C.K_IDPER = lk_periodo 
      AND c.k_tipobuque = lk_tipo_buque;
    
  RETURN lq_numero_cupos_disponibles;
      EXCEPTION
          WHEN no_data_found THEN
              SELECT n_periodo 
                  INTO ln_periodo 
              FROM periodo 
              WHERE k_ID =lk_periodo;
              RAISE_APPLICATION_ERROR (-20202, 'No hay cupos disponibles para la fecha: '||lf_fecha||' sentido: '||ln_sentido||' y periodo: '|| ln_periodo );
END FU_CUPOS_DISPONIBLES;
/



DROP FUNCTION FU_PRECIO_PASO;
CREATE OR REPLACE FUNCTION FU_PRECIO_PASO
    (        
        lk_idReserva IN PASO.k_idReserva%TYPE,
        ln_esclusa IN PASO.n_esclusa%TYPE       
    )
    RETURN PASO.v_costo%TYPE 
    AS
        lk_num_serie          BUQUE.k_num_serie%TYPE;
        lk_idCarga            TIPOCARGA.k_id%TYPE;
        lv_cargaTransportada  RESERVA.v_cargaTransportada%TYPE;
        lv_carga_max          BUQUE.v_carga_max%TYPE;        
        lv_porcentajeCarga    NUMBER(4,2) := 0;
        lv_costo              PARAMETROSPASO.v_costo%TYPE;
    BEGIN
        SELECT R.k_num_serie 
          INTO lk_num_serie 
          FROM Reserva R 
         WHERE R.k_id = lk_idReserva;
        
        SELECT TP.k_id 
          INTO lk_idCarga 
          FROM tipocarga TP, buque B 
         WHERE TP.k_id = B.k_idCarga 
           AND B.k_num_serie = lk_num_serie;
          
        SELECT R.v_cargaTransportada 
          INTO lv_cargaTransportada 
          FROM Reserva R 
         WHERE R.k_id = lk_idReserva;
        
        SELECT B.v_carga_max 
          INTO lv_carga_max 
          FROM buque B 
         WHERE B.k_num_serie = lk_num_serie;
        
        lv_porcentajeCarga := (lv_cargaTransportada * 100) / lv_carga_max;

        IF (lk_idCarga = 2) THEN
            IF (lv_porcentajeCarga > 40) THEN
                SELECT PP.v_costo 
                  INTO lv_costo 
                  FROM parametrospaso PP 
                 WHERE PP.k_tipocarga = lk_idCarga 
                   AND PP.v_porcentaje > 40;
            ELSE
                SELECT PP.v_costo 
                  INTO lv_costo 
                  FROM parametrospaso PP 
                 WHERE PP.k_tipocarga = lk_idCarga 
                   AND PP.v_porcentaje <= 40;
            END IF;
        ELSIF (lk_idCarga = 1) THEN
            IF (ln_esclusa = 'Neopanamax') THEN
                SELECT PP.v_costo 
                  INTO lv_costo 
                  FROM parametrospaso PP 
                 WHERE PP.k_tipocarga = lk_idCarga 
                   AND PP.n_esclusa = 'Neopanamax';                
            ELSE
                SELECT PP.v_costo 
                  INTO lv_costo 
                  FROM parametrospaso PP
                 WHERE PP.k_tipocarga = lk_idCarga 
                   AND PP.n_esclusa = 'Panamax';                
            END IF;
            lv_costo := lv_costo * lv_cargaTransportada;
        ELSIF (lk_idCarga = 3) THEN
            IF (lv_porcentajeCarga > 35) THEN
                SELECT PP.v_costo 
                  INTO lv_costo
                  FROM parametrospaso PP 
                 WHERE PP.k_tipocarga = lk_idCarga 
                   AND PP.v_porcentaje > 35;
            ELSE
                SELECT PP.v_costo 
                  INTO lv_costo 
                  FROM parametrospaso PP 
                 WHERE PP.k_tipocarga = lk_idCarga 
                   AND PP.v_porcentaje <= 35;
            END IF;
        ELSIF (lk_idCarga = 4) THEN
            IF (lv_porcentajeCarga > 60) THEN
                SELECT PP.v_costo 
                  INTO lv_costo 
                  FROM parametrospaso PP 
                 WHERE PP.k_tipocarga = lk_idCarga 
                   AND PP.n_esclusa = 'Neopanamax';
            ELSE
                SELECT PP.v_costo 
                  INTO lv_costo 
                  FROM parametrospaso PP 
                 WHERE PP.k_tipocarga = lk_idCarga 
                   AND PP.n_esclusa = 'Panamax';
            END IF;
        ELSE
            IF (lv_porcentajeCarga < 50) THEN
                SELECT PP.v_costo 
                  INTO lv_costo 
                  FROM parametrospaso PP 
                 WHERE PP.k_tipocarga = lk_idCarga 
                   AND PP.n_esclusa = 'Neopanamax';
            ELSE
                SELECT PP.v_costo 
                  INTO lv_costo 
                  FROM parametrospaso PP 
                 WHERE PP.k_tipocarga = lk_idCarga 
                   AND PP.n_esclusa != 'Neopanamax';
            END IF;
        END IF;
    RETURN lv_costo;
END FU_PRECIO_PASO;
/
show errors 


CREATE OR REPLACE FUNCTION FU_PRECIO_RESERVA(
    BEAN  IN NUMBER, 
    LOA   IN NUMBER
)
RETURN VARCHAR2 AS 
   PRECIO           NUMBER(2)   := 0;
   CANT_PARAMETROS  NUMBER(3)   := 0;
   BEAN_MIN         NUMBER(5)   := 0;
   LOA_MIN          NUMBER(5)   := 0;
   BEAN_MAX         NUMBER(5)   := 0;
   LOA_MAX          NUMBER(5)   := 0;
   COSTO_           NUMBER(8,2) := 0;
BEGIN
    SELECT count(*) 
      INTO CANT_PARAMETROS 
      FROM PARAMETROSRESERVA;

    IF CANT_PARAMETROS>0 THEN
        FOR ID IN 1..CANT_PARAMETROS LOOP
            SELECT (SELECT Q_BEAN_MIN 
                      FROM PARAMETROSRESERVA 
                     WHERE K_ID= ID)
              INTO BEAN_MIN 
              FROM dual;
        
            SELECT (SELECT Q_BEAN_MAX 
                      FROM PARAMETROSRESERVA 
                     WHERE K_ID= ID)
              INTO BEAN_MAX 
              FROM dual;
        
            SELECT (SELECT Q_LOA_MIN 
                      FROM PARAMETROSRESERVA 
                     WHERE K_ID= ID)
              INTO LOA_MIN 
              FROM dual;
        
            SELECT (SELECT Q_LOA_MAX 
                      FROM PARAMETROSRESERVA 
                      WHERE K_ID= ID)
              INTO LOA_MAX 
              FROM dual;
            
            IF BEAN>=BEAN_MIN AND BEAN<=BEAN_MAX AND LOA>=LOA_MIN AND LOA<=LOA_MAX THEN
              SELECT (SELECT V_COSTO 
                        FROM PARAMETROSRESERVA 
                       WHERE K_ID= ID)
                INTO COSTO_
                FROM dual;
            END IF;
        END LOOP;
    END IF;
    
    RETURN COSTO_;

END FU_PRECIO_RESERVA;
/


SET ServerOutput ON;
SET VERIFY OFF;
DROP PROCEDURE PR_REGISTRAR_PASO;
create or replace PROCEDURE PR_REGISTRAR_PASO
	(		
		lk_idReserva  IN RESERVA.k_id%TYPE,		
		lf_fecha      IN PASO.f_fecha%TYPE,
		lq_pasajeros  IN PASO.q_pasajeros%TYPE,		
		ln_esclusa    IN PASO.n_esclusa%TYPE
	)
	AS		
		lv_costo      PASO.v_costo%TYPE;
	BEGIN		
		lv_costo := FU_PRECIO_PASO(lk_idReserva,ln_esclusa);		
		INSERT INTO PASO (k_id, v_costo, k_idReserva, f_fecha, q_pasajeros, n_esclusa) 
			VALUES 
 				(paso_seq.NEXTVAL, lv_costo, lk_idReserva, lf_fecha, lq_pasajeros, ln_esclusa);
END PR_REGISTRAR_PASO;
/
show errors

create or replace PROCEDURE PR_REGISTRAR_RESERVA
(
   lf_eta               IN RESERVA.f_eta%TYPE,
   ln_puerto_salida     IN RESERVA.n_puerto_salida%TYPE,
   ln_puerto_llegada    IN RESERVA.n_puerto_llegada%TYPE,
   lf_salida            IN RESERVA.f_salida%TYPE,
   lf_llegada           IN RESERVA.f_llegada%TYPE,
   lk_num_serie         IN RESERVA.k_num_serie%TYPE,
   lv_cargaTransportada IN RESERVA.v_cargatransportada%TYPE,
   lk_id_agente         IN RESERVA.k_idAgente%TYPE,
   ln_sentido           IN reserva.n_sentido%TYPE
)
AS
 lv_beam                      buque.v_beam%TYPE;
 lv_loa                       buque.v_loa%TYPE;
 lv_costo_reserva             NUMBER;
 lk_periodo                   periodo.k_id%TYPE;
 lq_numero_cupos_disponibles  NUMBER;
 lk_tipo_buque                buque.k_idbuque%type;
 v_ok                         NUMBER (1) := 1;
BEGIN
---- Calcular que periodo aplica -----
    lk_periodo := FU_CALCULAR_PERIODO(lf_eta);
 
    IF lk_periodo = 0 THEN
        RAISE_APPLICATION_ERROR (-20200, 'No hay periodo abiertos para la fecha seleccionada '||TO_CHAR(lf_eta,'yyyy/mm/dd'));
        v_ok :=0;
    END IF;

 ----- obtener los datos del buque ----------------
    BEGIN 
       SELECT B.k_idbuque, B.v_beam, B.v_loa --Se cambia lÃ­nea para capturar datos en una sola consulta
         INTO lk_tipo_buque, lv_beam, lv_loa
         FROM BUQUE B 
        WHERE B.k_num_serie = lk_num_serie;
    EXCEPTION   
        WHEN no_data_found THEN
          v_ok :=0;
          dbms_output.put_line('Datos no encontrados'); 
          RAISE_APPLICATION_ERROR (-20201, 'Datos no encontrados para el buque ' || lk_num_serie);
    END;
----  Verificar que hay cupos disponibles para la fecha con el periodo calculado y para el sentido seleccionado -----
    lq_numero_cupos_disponibles := FU_CUPOS_DISPONIBLES(lf_eta,ln_sentido,lk_periodo,lk_tipo_buque);
     
     IF lq_numero_cupos_disponibles = 0 THEN
        v_ok :=0;
        RAISE_APPLICATION_ERROR (-20203, 'No hay Cupos Disponibles');
     END IF;
     dbms_output.put_line('Cupos disponibles '||lq_numero_cupos_disponibles); 
 ----- calcular el costo de la reserva --------------
    lv_costo_reserva := FU_PRECIO_RESERVA(lv_beam,lv_loa);
    BEGIN
        INSERT INTO 
            RESERVA (k_id, f_eta, n_puerto_salida, n_puerto_llegada,f_salida,f_llegada,k_num_serie,v_cargaTransportada,v_costo,i_estado,k_idAgente,n_sentido) 
        VALUES 
        (reserva_seq.NEXTVAL, lf_eta, ln_puerto_salida ,ln_puerto_llegada ,lf_salida ,lf_llegada ,lk_num_serie ,lv_cargaTransportada ,lv_costo_reserva ,'Dis', lk_id_agente, ln_sentido);
    EXCEPTION
        WHEN OTHERS THEN
            v_ok :=0;
            dbms_output.put_line('Error al insertar la reserva'); 
            dbms_output.put_line(sqlerrm);
    END;
 ------- Actualizar los cupos disponibles -----------
    BEGIN
        UPDATE cronograma c 
           SET c.q_cupos_disp = c.q_cupos_disp-1 
         WHERE c.k_idper=lk_periodo 
           AND c.n_sentido=ln_sentido 
           AND c.k_idper = lk_periodo 
           AND c.k_tipobuque = lk_tipo_buque;
    EXCEPTION
        WHEN OTHERS THEN
            v_ok :=0;
            dbms_output.put_line('Error al ACTUALIZAR los cupos disponibles'); 
    END;

    IF v_ok = 1 THEN
        COMMIT;
        dbms_output.put_line('RESERVA REGISTRADA DE MANERA SATISFACTORIA');
    ELSIF v_ok = 0 THEN
        ROLLBACK;
        dbms_output.put_line('SE HA PRESENTADO UN ERROR');
    END IF;
        
END PR_REGISTRAR_RESERVA;
/

CREATE OR REPLACE PROCEDURE PR_REGISTRAR_SUBASTA 
      pk_subasta    IN SUBASTA.K_SUBASTA%TYPE,
      pf_fecha      IN SUBASTA.F_FECHA%TYPE,
      pv_tope       IN SUBASTA.V_TOPE_MINIMO%TYPE,
      pk_reserva    IN SUBASTA.K_RESERVA%TYPE,
)
IS
    CURSOR c_reserva(pc_idReserva IN RESERVA.k_id%TYPE) IS
      SELECT *
        FROM RESERVA  RESE
       WHERE RESE.K_ID = pc_idReserva;;
       
    r_reserva     c_reserva%ROWTYPE;
    NO_RESERVA    EXCEPTION;
    v_ok    NUMBER(1) := 1;

    BEGIN
        -- Instrucciones de ejecuciÃ³n
        OPEN c_reserva(p_Incl_Codigo);
        FETCH c_reserva
         INTO r_reserva;

        IF c_reserva%FOUND THEN
            INSERT INTO
                SUBASTA
            VALUES (
                    pk_subasta,
                    pf_fecha,
                    pv_tope,
                    pk_reserva
                   )
            CLOSE c_reserva;
        ELSE
            CLOSE c_reserva;
            RAISE NO_RESERVA
        END IF;
    EXCEPTION
        WHEN NO_RESERVA THEN
            v_ok    NUMBER(1) := 0;
            dbms_output.put_line('La reserva ingresada no existe');
        WHEN OTHERS THEN
            v_ok    NUMBER(1) := 0;
            dbms_output.put_line('ERROR presentado en el proceso REGISTRO DE SUBASTA');
 
    IF v_ok = 1 THEN
      dbms_output.put_line('PROCESO TERMINADO CORRECTAMENTE');
      COMMIT;    
    END IF;
END;
